{"formatVersion":"1.0","generatedAt":"2022-10-02T16:05:52Z","generatedBy":{"name":"Lee Jaeyong"},"keywords":["wwdc21"],"name":"Woody Demo Collection","overview":"Packages to be used in our demo app","packages":[{"keywords":["alamofire","carthage","certificate-pinning","cocoapods","httpurlresponse","networking","parameter-encoding","public-key-pinning","request","response","swift","swift-package-manager","urlrequest","urlsession","xcode"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/Alamofire/Alamofire/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/Alamofire/Alamofire/master/README.md","summary":"Elegant HTTP Networking in Swift","url":"https://github.com/Alamofire/Alamofire.git","versions":[{"defaultToolsVersion":"5.6","manifests":{"5.6":{"minimumPlatformVersions":[{"name":"macos","version":"10.12"},{"name":"ios","version":"10.0"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Alamofire","products":[{"name":"Alamofire","targets":["Alamofire"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Alamofire","name":"Alamofire"}],"toolsVersion":"5.6"}},"version":"5.6.2"},{"defaultToolsVersion":"5.6","manifests":{"5.6":{"minimumPlatformVersions":[{"name":"macos","version":"10.12"},{"name":"ios","version":"10.0"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Alamofire","products":[{"name":"Alamofire","targets":["Alamofire"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Alamofire","name":"Alamofire"}],"toolsVersion":"5.6"}},"version":"5.6.1"},{"defaultToolsVersion":"5.6","manifests":{"5.6":{"minimumPlatformVersions":[{"name":"macos","version":"10.12"},{"name":"ios","version":"10.0"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Alamofire","products":[{"name":"Alamofire","targets":["Alamofire"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Alamofire","name":"Alamofire"}],"toolsVersion":"5.6"}},"version":"5.6.0"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"Alamofire","products":[{"name":"Alamofire","targets":["Alamofire"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Alamofire","name":"Alamofire"}],"toolsVersion":"5.0"}},"version":"4.9.1"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"Alamofire","products":[{"name":"Alamofire","targets":["Alamofire"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Alamofire","name":"Alamofire"}],"toolsVersion":"5.0"}},"version":"4.9.0"},{"defaultToolsVersion":"4.2","manifests":{"4.2":{"packageName":"Alamofire","products":[{"name":"Alamofire","targets":["Alamofire"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Alamofire","name":"Alamofire"}],"toolsVersion":"4.2"}},"version":"4.8.2"}]},{"keywords":["auto","autolayout","cocoapods","constraints","dsl","layout","snapkit","swift","ui","xcode"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/SnapKit/SnapKit/develop/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/SnapKit/SnapKit/develop/README.md","summary":"A Swift Autolayout DSL for iOS & OS X","url":"https://github.com/SnapKit/SnapKit.git","versions":[{"defaultToolsVersion":"5.0","manifests":{"5.0":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.11"},{"name":"tvos","version":"10.0"}],"packageName":"SnapKit","products":[{"name":"SnapKit","targets":["SnapKit"],"type":{"library":["automatic"]}},{"name":"SnapKit-Dynamic","targets":["SnapKit"],"type":{"library":["dynamic"]}}],"targets":[{"moduleName":"SnapKit","name":"SnapKit"}],"toolsVersion":"5.0"}},"version":"5.6.0"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.12"},{"name":"tvos","version":"10.0"}],"packageName":"SnapKit","products":[{"name":"SnapKit","targets":["SnapKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SnapKit","name":"SnapKit"}],"toolsVersion":"5.0"}},"version":"5.0.1"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"SnapKit","products":[{"name":"SnapKit","targets":["SnapKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SnapKit","name":"SnapKit"}],"toolsVersion":"5.0"}},"version":"5.0.0"},{"defaultToolsVersion":"4.0","manifests":{"4.0":{"packageName":"SnapKit","products":[{"name":"SnapKit","targets":["SnapKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SnapKit","name":"SnapKit"}],"toolsVersion":"4.0"}},"version":"4.0.1"}]},{"keywords":["cache","filters","image","image-processor","ios","kingfisher","macos","swift","xcode"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/onevcat/Kingfisher/master/README.md","summary":"A lightweight, pure-Swift library for downloading and caching images from the web.","url":"https://github.com/onevcat/Kingfisher","versions":[{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"12.0"},{"name":"macos","version":"10.14"},{"name":"tvos","version":"12.0"},{"name":"watchos","version":"5.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1"}},"summary":"","version":"7.3.2"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"12.0"},{"name":"macos","version":"10.14"},{"name":"tvos","version":"12.0"},{"name":"watchos","version":"5.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1"}},"summary":"","version":"7.3.1"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"12.0"},{"name":"macos","version":"10.14"},{"name":"tvos","version":"12.0"},{"name":"watchos","version":"5.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1"}},"summary":"","version":"7.3.0"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.12"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1"}},"summary":"","version":"6.3.1"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.12"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1"}},"summary":"","version":"6.3.0"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"10.0"},{"name":"macos","version":"10.12"},{"name":"tvos","version":"10.0"},{"name":"watchos","version":"3.0"}],"packageName":"Kingfisher","products":[{"name":"Kingfisher","targets":["Kingfisher"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Kingfisher","name":"Kingfisher"}],"toolsVersion":"5.1"}},"summary":"","version":"6.2.1"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Jaeyong Lee","organization":"Jaeyong Lee","organizationalUnit":"TZVHD77BLL","userID":"TZVHD77BLL"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGZHpDQ0JGK2dBd0lCQWdJUUhpM0JkY0xzcllURUpCRmhJQXVUYVRBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXlNVEF3TWpFMk1EVXdNRm9YRFRJek1UQXdNakUyTURRMU9Wb3dnWVF4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBVV2xaSVJEYzNRa3hNTVM0d0xBWURWUVFERENWVGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUVwaFpYbHZibWNnVEdWbE1STXdFUVlEVlFRTERBcFVXbFpJUkRjM1FreE1NUlF3RWdZRFZRUUtEQXRLWVdWNWIyNW5JRXhsWlRFTE1Ba0dBMVVFQmhNQ1MxSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDeUtmNGE5ZTgvTXJ2WFJrUUMzaUpwRmFyaG1ZRUFIVzlTSi96TUlOb3RhU1JkQ3JBbDEzVDlwZVhDRkcyeThsMWNSdC83UzRyYVVNakhzdDJqSXYxRjNQTE5wSDZXWFFmTUhyOERacTRpcC92ZnY1SnRJd00rTmZBV0FCb25OYjNCeDAwakxWTDBSVVY0dHhKbXpNcWZFMHNwU0FaVlowd21lWS9BcjdDSDBxTEhoQXNMN2NzTW5KMnNQMkpKUndxVXlqR1Z6S2dRLzF1Ymlnc1pRUStINi9IZ08rZ1RqeFAzSGlWSC84YnN3elMveXVYWURsdDZGUVFtWmdNSEdqSHFKRDBnVzBhNWlJem9qV3R6ZTNVNDdLbHMwRWlmWXBrcmU3VHJuWjREbXFwS0ZRejV0OWh5cUxyMWc2SWJleGVOcUdIQjRNc2oxU0U4OTBHSTVmQUZBZ01CQUFHamdnSHhNSUlCN1RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFuK3dCV1ErYTlrQ3BJU3VTWW9Zd3lYN0tleU1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTEzZDJSeVp6TXhPVENDQVI0R0ExVWRJQVNDQVJVd2dnRVJNSUlCRFFZSktvWklodmRqWkFVQk1JSC9NSUhEQmdnckJnRUZCUWNDQWpDQnRneUJzMUpsYkdsaGJtTmxJRzl1SUhSb2FYTWdZMlZ5ZEdsbWFXTmhkR1VnWW5rZ1lXNTVJSEJoY25SNUlHRnpjM1Z0WlhNZ1lXTmpaWEIwWVc1alpTQnZaaUIwYUdVZ2RHaGxiaUJoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW1JSFZ6WlN3Z1kyVnlkR2xtYVdOaGRHVWdjRzlzYVdONUlHRnVaQ0JqWlhKMGFXWnBZMkYwYVc5dUlIQnlZV04wYVdObElITjBZWFJsYldWdWRITXVNRGNHQ0NzR0FRVUZCd0lCRml0b2RIUndjem92TDNkM2R5NWhjSEJzWlM1amIyMHZZMlZ5ZEdsbWFXTmhkR1ZoZFhSb2IzSnBkSGt2TUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TURNQjBHQTFVZERnUVdCQlJQelg0MWkwa1Myd0lNbFJtd1ZuVVlaODZVY0RBT0JnTlZIUThCQWY4RUJBTUNCNEF3RUFZS0tvWklodmRqWkFZQkl3UUNCUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUZBSGVIOWpDV3hsWDJBUmNwSU85NlgvaVNGdzhQV1M5NzFqVFZ1VDQ4OGdQZDJsM0hrWVIrSytaWWdYT1l4YUd2ZHZIa2xlK25pQmhUMnRpdlprQ3FWbzlJUm9pVldwRlJzd1NlWDgrRjVKbzMvM2gySGZjLzZac3N1dXNsOXlERUhpeHIxV28yOUZpb3RSbGt0TTNwL3JiQVB6bnFWd2RZOUR1blpFcUQyRjhtSFJRS2hsYm45cys3NHlBWHVwSnMwOTZGc0xRTUdpWlE2VzlaTTVqNWtudE9HeVZlNlhKMTVucGdyQVZXYWF0ckRnQWlsZzQvWXhaMzFGUldCNGFoSUdkVXdEVGZnTERpZ3Q2azd1cElBYklWR0d3ZVJJYURZdk9HUklWVWM4U2wvRnUrbHdHaDdmRHFob2F6K2tZMVovRzY2L2trcXBRNU9EOGFtUnFoST0iCiAgXQp9.ewogICJmb3JtYXRWZXJzaW9uIiA6ICIxLjAiLAogICJnZW5lcmF0ZWRBdCIgOiAiMjAyMi0xMC0wMlQxNjowNTo1MloiLAogICJnZW5lcmF0ZWRCeSIgOiB7CiAgICAibmFtZSIgOiAiTGVlIEphZXlvbmciCiAgfSwKICAia2V5d29yZHMiIDogWwogICAgInd3ZGMyMSIKICBdLAogICJuYW1lIiA6ICJXb29keSBEZW1vIENvbGxlY3Rpb24iLAogICJvdmVydmlldyIgOiAiUGFja2FnZXMgdG8gYmUgdXNlZCBpbiBvdXIgZGVtbyBhcHAiLAogICJwYWNrYWdlcyIgOiBbCiAgICB7CiAgICAgICJrZXl3b3JkcyIgOiBbCiAgICAgICAgImFsYW1vZmlyZSIsCiAgICAgICAgImNhcnRoYWdlIiwKICAgICAgICAiY2VydGlmaWNhdGUtcGlubmluZyIsCiAgICAgICAgImNvY29hcG9kcyIsCiAgICAgICAgImh0dHB1cmxyZXNwb25zZSIsCiAgICAgICAgIm5ldHdvcmtpbmciLAogICAgICAgICJwYXJhbWV0ZXItZW5jb2RpbmciLAogICAgICAgICJwdWJsaWMta2V5LXBpbm5pbmciLAogICAgICAgICJyZXF1ZXN0IiwKICAgICAgICAicmVzcG9uc2UiLAogICAgICAgICJzd2lmdCIsCiAgICAgICAgInN3aWZ0LXBhY2thZ2UtbWFuYWdlciIsCiAgICAgICAgInVybHJlcXVlc3QiLAogICAgICAgICJ1cmxzZXNzaW9uIiwKICAgICAgICAieGNvZGUiCiAgICAgIF0sCiAgICAgICJsaWNlbnNlIiA6IHsKICAgICAgICAibmFtZSIgOiAiTUlUIiwKICAgICAgICAidXJsIiA6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQWxhbW9maXJlL0FsYW1vZmlyZS9tYXN0ZXIvTElDRU5TRSIKICAgICAgfSwKICAgICAgInJlYWRtZVVSTCIgOiAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0FsYW1vZmlyZS9BbGFtb2ZpcmUvbWFzdGVyL1JFQURNRS5tZCIsCiAgICAgICJzdW1tYXJ5IiA6ICJFbGVnYW50IEhUVFAgTmV0d29ya2luZyBpbiBTd2lmdCIsCiAgICAgICJ1cmwiIDogImh0dHBzOi8vZ2l0aHViLmNvbS9BbGFtb2ZpcmUvQWxhbW9maXJlLmdpdCIsCiAgICAgICJ2ZXJzaW9ucyIgOiBbCiAgICAgICAgewogICAgICAgICAgImRlZmF1bHRUb29sc1ZlcnNpb24iIDogIjUuNiIsCiAgICAgICAgICAibWFuaWZlc3RzIiA6IHsKICAgICAgICAgICAgIjUuNiIgOiB7CiAgICAgICAgICAgICAgIm1pbmltdW1QbGF0Zm9ybVZlcnNpb25zIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIm1hY29zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjEyIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogImlvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogInR2b3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ3YXRjaG9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjMuMCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwYWNrYWdlTmFtZSIgOiAiQWxhbW9maXJlIiwKICAgICAgICAgICAgICAicHJvZHVjdHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiQWxhbW9maXJlIiwKICAgICAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgICAgICJBbGFtb2ZpcmUiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAgICAgICAibGlicmFyeSIgOiBbCiAgICAgICAgICAgICAgICAgICAgICAiYXV0b21hdGljIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibW9kdWxlTmFtZSIgOiAiQWxhbW9maXJlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIkFsYW1vZmlyZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0b29sc1ZlcnNpb24iIDogIjUuNiIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJ2ZXJzaW9uIiA6ICI1LjYuMiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJkZWZhdWx0VG9vbHNWZXJzaW9uIiA6ICI1LjYiLAogICAgICAgICAgIm1hbmlmZXN0cyIgOiB7CiAgICAgICAgICAgICI1LjYiIDogewogICAgICAgICAgICAgICJtaW5pbXVtUGxhdGZvcm1WZXJzaW9ucyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJtYWNvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4xMiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJpb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ0dm9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAid2F0Y2hvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIzLjAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicGFja2FnZU5hbWUiIDogIkFsYW1vZmlyZSIsCiAgICAgICAgICAgICAgInByb2R1Y3RzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIkFsYW1vZmlyZSIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgICAgICAiQWxhbW9maXJlIgogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgICAgICAgImxpYnJhcnkiIDogWwogICAgICAgICAgICAgICAgICAgICAgImF1dG9tYXRpYyIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm1vZHVsZU5hbWUiIDogIkFsYW1vZmlyZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJBbGFtb2ZpcmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidG9vbHNWZXJzaW9uIiA6ICI1LjYiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAidmVyc2lvbiIgOiAiNS42LjEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZGVmYXVsdFRvb2xzVmVyc2lvbiIgOiAiNS42IiwKICAgICAgICAgICJtYW5pZmVzdHMiIDogewogICAgICAgICAgICAiNS42IiA6IHsKICAgICAgICAgICAgICAibWluaW11bVBsYXRmb3JtVmVyc2lvbnMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAibWFjb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMTIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiaW9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAidHZvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIndhdGNob3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMy4wIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInBhY2thZ2VOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIkFsYW1vZmlyZSIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAgICJsaWJyYXJ5IiA6IFsKICAgICAgICAgICAgICAgICAgICAgICJhdXRvbWF0aWMiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJtb2R1bGVOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiQWxhbW9maXJlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRvb2xzVmVyc2lvbiIgOiAiNS42IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInZlcnNpb24iIDogIjUuNi4wIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImRlZmF1bHRUb29sc1ZlcnNpb24iIDogIjUuMCIsCiAgICAgICAgICAibWFuaWZlc3RzIiA6IHsKICAgICAgICAgICAgIjUuMCIgOiB7CiAgICAgICAgICAgICAgInBhY2thZ2VOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIkFsYW1vZmlyZSIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAgICJsaWJyYXJ5IiA6IFsKICAgICAgICAgICAgICAgICAgICAgICJhdXRvbWF0aWMiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJtb2R1bGVOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiQWxhbW9maXJlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRvb2xzVmVyc2lvbiIgOiAiNS4wIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInZlcnNpb24iIDogIjQuOS4xIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImRlZmF1bHRUb29sc1ZlcnNpb24iIDogIjUuMCIsCiAgICAgICAgICAibWFuaWZlc3RzIiA6IHsKICAgICAgICAgICAgIjUuMCIgOiB7CiAgICAgICAgICAgICAgInBhY2thZ2VOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIkFsYW1vZmlyZSIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAgICJsaWJyYXJ5IiA6IFsKICAgICAgICAgICAgICAgICAgICAgICJhdXRvbWF0aWMiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJtb2R1bGVOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiQWxhbW9maXJlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRvb2xzVmVyc2lvbiIgOiAiNS4wIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInZlcnNpb24iIDogIjQuOS4wIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImRlZmF1bHRUb29sc1ZlcnNpb24iIDogIjQuMiIsCiAgICAgICAgICAibWFuaWZlc3RzIiA6IHsKICAgICAgICAgICAgIjQuMiIgOiB7CiAgICAgICAgICAgICAgInBhY2thZ2VOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIkFsYW1vZmlyZSIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAgICJsaWJyYXJ5IiA6IFsKICAgICAgICAgICAgICAgICAgICAgICJhdXRvbWF0aWMiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJtb2R1bGVOYW1lIiA6ICJBbGFtb2ZpcmUiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiQWxhbW9maXJlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRvb2xzVmVyc2lvbiIgOiAiNC4yIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInZlcnNpb24iIDogIjQuOC4yIgogICAgICAgIH0KICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImtleXdvcmRzIiA6IFsKICAgICAgICAiYXV0byIsCiAgICAgICAgImF1dG9sYXlvdXQiLAogICAgICAgICJjb2NvYXBvZHMiLAogICAgICAgICJjb25zdHJhaW50cyIsCiAgICAgICAgImRzbCIsCiAgICAgICAgImxheW91dCIsCiAgICAgICAgInNuYXBraXQiLAogICAgICAgICJzd2lmdCIsCiAgICAgICAgInVpIiwKICAgICAgICAieGNvZGUiCiAgICAgIF0sCiAgICAgICJsaWNlbnNlIiA6IHsKICAgICAgICAibmFtZSIgOiAiTUlUIiwKICAgICAgICAidXJsIiA6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vU25hcEtpdC9TbmFwS2l0L2RldmVsb3AvTElDRU5TRSIKICAgICAgfSwKICAgICAgInJlYWRtZVVSTCIgOiAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1NuYXBLaXQvU25hcEtpdC9kZXZlbG9wL1JFQURNRS5tZCIsCiAgICAgICJzdW1tYXJ5IiA6ICJBIFN3aWZ0IEF1dG9sYXlvdXQgRFNMIGZvciBpT1MgJiBPUyBYIiwKICAgICAgInVybCIgOiAiaHR0cHM6Ly9naXRodWIuY29tL1NuYXBLaXQvU25hcEtpdC5naXQiLAogICAgICAidmVyc2lvbnMiIDogWwogICAgICAgIHsKICAgICAgICAgICJkZWZhdWx0VG9vbHNWZXJzaW9uIiA6ICI1LjAiLAogICAgICAgICAgIm1hbmlmZXN0cyIgOiB7CiAgICAgICAgICAgICI1LjAiIDogewogICAgICAgICAgICAgICJtaW5pbXVtUGxhdGZvcm1WZXJzaW9ucyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJpb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJtYWNvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4xMSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ0dm9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicGFja2FnZU5hbWUiIDogIlNuYXBLaXQiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJTbmFwS2l0IiwKICAgICAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgICAgICJTbmFwS2l0IgogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgICAgICAgImxpYnJhcnkiIDogWwogICAgICAgICAgICAgICAgICAgICAgImF1dG9tYXRpYyIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJTbmFwS2l0LUR5bmFtaWMiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIlNuYXBLaXQiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAgICAgICAibGlicmFyeSIgOiBbCiAgICAgICAgICAgICAgICAgICAgICAiZHluYW1pYyIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm1vZHVsZU5hbWUiIDogIlNuYXBLaXQiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiU25hcEtpdCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0b29sc1ZlcnNpb24iIDogIjUuMCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJ2ZXJzaW9uIiA6ICI1LjYuMCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJkZWZhdWx0VG9vbHNWZXJzaW9uIiA6ICI1LjAiLAogICAgICAgICAgIm1hbmlmZXN0cyIgOiB7CiAgICAgICAgICAgICI1LjAiIDogewogICAgICAgICAgICAgICJtaW5pbXVtUGxhdGZvcm1WZXJzaW9ucyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJpb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJtYWNvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4xMiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ0dm9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicGFja2FnZU5hbWUiIDogIlNuYXBLaXQiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJTbmFwS2l0IiwKICAgICAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgICAgICJTbmFwS2l0IgogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgICAgICAgImxpYnJhcnkiIDogWwogICAgICAgICAgICAgICAgICAgICAgImF1dG9tYXRpYyIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm1vZHVsZU5hbWUiIDogIlNuYXBLaXQiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiU25hcEtpdCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0b29sc1ZlcnNpb24iIDogIjUuMCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJ2ZXJzaW9uIiA6ICI1LjAuMSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJkZWZhdWx0VG9vbHNWZXJzaW9uIiA6ICI1LjAiLAogICAgICAgICAgIm1hbmlmZXN0cyIgOiB7CiAgICAgICAgICAgICI1LjAiIDogewogICAgICAgICAgICAgICJwYWNrYWdlTmFtZSIgOiAiU25hcEtpdCIsCiAgICAgICAgICAgICAgInByb2R1Y3RzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIlNuYXBLaXQiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIlNuYXBLaXQiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAgICAgICAibGlicmFyeSIgOiBbCiAgICAgICAgICAgICAgICAgICAgICAiYXV0b21hdGljIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibW9kdWxlTmFtZSIgOiAiU25hcEtpdCIsCiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJTbmFwS2l0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRvb2xzVmVyc2lvbiIgOiAiNS4wIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInZlcnNpb24iIDogIjUuMC4wIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImRlZmF1bHRUb29sc1ZlcnNpb24iIDogIjQuMCIsCiAgICAgICAgICAibWFuaWZlc3RzIiA6IHsKICAgICAgICAgICAgIjQuMCIgOiB7CiAgICAgICAgICAgICAgInBhY2thZ2VOYW1lIiA6ICJTbmFwS2l0IiwKICAgICAgICAgICAgICAicHJvZHVjdHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiU25hcEtpdCIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgICAgICAiU25hcEtpdCIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAgICJsaWJyYXJ5IiA6IFsKICAgICAgICAgICAgICAgICAgICAgICJhdXRvbWF0aWMiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJtb2R1bGVOYW1lIiA6ICJTbmFwS2l0IiwKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIlNuYXBLaXQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidG9vbHNWZXJzaW9uIiA6ICI0LjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAidmVyc2lvbiIgOiAiNC4wLjEiCiAgICAgICAgfQogICAgICBdCiAgICB9LAogICAgewogICAgICAia2V5d29yZHMiIDogWwogICAgICAgICJjYWNoZSIsCiAgICAgICAgImZpbHRlcnMiLAogICAgICAgICJpbWFnZSIsCiAgICAgICAgImltYWdlLXByb2Nlc3NvciIsCiAgICAgICAgImlvcyIsCiAgICAgICAgImtpbmdmaXNoZXIiLAogICAgICAgICJtYWNvcyIsCiAgICAgICAgInN3aWZ0IiwKICAgICAgICAieGNvZGUiCiAgICAgIF0sCiAgICAgICJsaWNlbnNlIiA6IHsKICAgICAgICAibmFtZSIgOiAiTUlUIiwKICAgICAgICAidXJsIiA6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb25ldmNhdC9LaW5nZmlzaGVyL21hc3Rlci9MSUNFTlNFIgogICAgICB9LAogICAgICAicmVhZG1lVVJMIiA6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb25ldmNhdC9LaW5nZmlzaGVyL21hc3Rlci9SRUFETUUubWQiLAogICAgICAic3VtbWFyeSIgOiAiQSBsaWdodHdlaWdodCwgcHVyZS1Td2lmdCBsaWJyYXJ5IGZvciBkb3dubG9hZGluZyBhbmQgY2FjaGluZyBpbWFnZXMgZnJvbSB0aGUgd2ViLiIsCiAgICAgICJ1cmwiIDogImh0dHBzOi8vZ2l0aHViLmNvbS9vbmV2Y2F0L0tpbmdmaXNoZXIiLAogICAgICAidmVyc2lvbnMiIDogWwogICAgICAgIHsKICAgICAgICAgICJkZWZhdWx0VG9vbHNWZXJzaW9uIiA6ICI1LjEiLAogICAgICAgICAgIm1hbmlmZXN0cyIgOiB7CiAgICAgICAgICAgICI1LjEiIDogewogICAgICAgICAgICAgICJtaW5pbXVtUGxhdGZvcm1WZXJzaW9ucyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJpb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTIuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJtYWNvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4xNCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ0dm9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEyLjAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAid2F0Y2hvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICI1LjAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicGFja2FnZU5hbWUiIDogIktpbmdmaXNoZXIiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJLaW5nZmlzaGVyIiwKICAgICAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgICAgICJLaW5nZmlzaGVyIgogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgICAgICAgImxpYnJhcnkiIDogWwogICAgICAgICAgICAgICAgICAgICAgImF1dG9tYXRpYyIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm1vZHVsZU5hbWUiIDogIktpbmdmaXNoZXIiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiS2luZ2Zpc2hlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0b29sc1ZlcnNpb24iIDogIjUuMSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJzdW1tYXJ5IiA6ICIiLAogICAgICAgICAgInZlcnNpb24iIDogIjcuMy4yIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImRlZmF1bHRUb29sc1ZlcnNpb24iIDogIjUuMSIsCiAgICAgICAgICAibWFuaWZlc3RzIiA6IHsKICAgICAgICAgICAgIjUuMSIgOiB7CiAgICAgICAgICAgICAgIm1pbmltdW1QbGF0Zm9ybVZlcnNpb25zIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogImlvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMi4wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIm1hY29zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjE0IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogInR2b3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTIuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ3YXRjaG9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjUuMCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwYWNrYWdlTmFtZSIgOiAiS2luZ2Zpc2hlciIsCiAgICAgICAgICAgICAgInByb2R1Y3RzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIktpbmdmaXNoZXIiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIktpbmdmaXNoZXIiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAgICAgICAibGlicmFyeSIgOiBbCiAgICAgICAgICAgICAgICAgICAgICAiYXV0b21hdGljIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibW9kdWxlTmFtZSIgOiAiS2luZ2Zpc2hlciIsCiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJLaW5nZmlzaGVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRvb2xzVmVyc2lvbiIgOiAiNS4xIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInN1bW1hcnkiIDogIiIsCiAgICAgICAgICAidmVyc2lvbiIgOiAiNy4zLjEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZGVmYXVsdFRvb2xzVmVyc2lvbiIgOiAiNS4xIiwKICAgICAgICAgICJtYW5pZmVzdHMiIDogewogICAgICAgICAgICAiNS4xIiA6IHsKICAgICAgICAgICAgICAibWluaW11bVBsYXRmb3JtVmVyc2lvbnMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiaW9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEyLjAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAibWFjb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMTQiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAidHZvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMi4wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIndhdGNob3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiNS4wIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInBhY2thZ2VOYW1lIiA6ICJLaW5nZmlzaGVyIiwKICAgICAgICAgICAgICAicHJvZHVjdHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiS2luZ2Zpc2hlciIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgICAgICAiS2luZ2Zpc2hlciIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAgICJsaWJyYXJ5IiA6IFsKICAgICAgICAgICAgICAgICAgICAgICJhdXRvbWF0aWMiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJtb2R1bGVOYW1lIiA6ICJLaW5nZmlzaGVyIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIktpbmdmaXNoZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidG9vbHNWZXJzaW9uIiA6ICI1LjEiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAic3VtbWFyeSIgOiAiIiwKICAgICAgICAgICJ2ZXJzaW9uIiA6ICI3LjMuMCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJkZWZhdWx0VG9vbHNWZXJzaW9uIiA6ICI1LjEiLAogICAgICAgICAgIm1hbmlmZXN0cyIgOiB7CiAgICAgICAgICAgICI1LjEiIDogewogICAgICAgICAgICAgICJtaW5pbXVtUGxhdGZvcm1WZXJzaW9ucyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJpb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJtYWNvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4xMiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ0dm9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAid2F0Y2hvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIzLjAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicGFja2FnZU5hbWUiIDogIktpbmdmaXNoZXIiLAogICAgICAgICAgICAgICJwcm9kdWN0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJLaW5nZmlzaGVyIiwKICAgICAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgICAgICJLaW5nZmlzaGVyIgogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgICAgICAgImxpYnJhcnkiIDogWwogICAgICAgICAgICAgICAgICAgICAgImF1dG9tYXRpYyIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm1vZHVsZU5hbWUiIDogIktpbmdmaXNoZXIiLAogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiS2luZ2Zpc2hlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0b29sc1ZlcnNpb24iIDogIjUuMSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJzdW1tYXJ5IiA6ICIiLAogICAgICAgICAgInZlcnNpb24iIDogIjYuMy4xIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImRlZmF1bHRUb29sc1ZlcnNpb24iIDogIjUuMSIsCiAgICAgICAgICAibWFuaWZlc3RzIiA6IHsKICAgICAgICAgICAgIjUuMSIgOiB7CiAgICAgICAgICAgICAgIm1pbmltdW1QbGF0Zm9ybVZlcnNpb25zIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogImlvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIm1hY29zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjEyIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogInR2b3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJ3YXRjaG9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjMuMCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwYWNrYWdlTmFtZSIgOiAiS2luZ2Zpc2hlciIsCiAgICAgICAgICAgICAgInByb2R1Y3RzIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIktpbmdmaXNoZXIiLAogICAgICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICAgICAgIktpbmdmaXNoZXIiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAgICAgICAibGlicmFyeSIgOiBbCiAgICAgICAgICAgICAgICAgICAgICAiYXV0b21hdGljIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRhcmdldHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibW9kdWxlTmFtZSIgOiAiS2luZ2Zpc2hlciIsCiAgICAgICAgICAgICAgICAgICJuYW1lIiA6ICJLaW5nZmlzaGVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRvb2xzVmVyc2lvbiIgOiAiNS4xIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInN1bW1hcnkiIDogIiIsCiAgICAgICAgICAidmVyc2lvbiIgOiAiNi4zLjAiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZGVmYXVsdFRvb2xzVmVyc2lvbiIgOiAiNS4xIiwKICAgICAgICAgICJtYW5pZmVzdHMiIDogewogICAgICAgICAgICAiNS4xIiA6IHsKICAgICAgICAgICAgICAibWluaW11bVBsYXRmb3JtVmVyc2lvbnMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiaW9zIiwKICAgICAgICAgICAgICAgICAgInZlcnNpb24iIDogIjEwLjAiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAibWFjb3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMTAuMTIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAidHZvcyIsCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uIiA6ICIxMC4wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIndhdGNob3MiLAogICAgICAgICAgICAgICAgICAidmVyc2lvbiIgOiAiMy4wIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInBhY2thZ2VOYW1lIiA6ICJLaW5nZmlzaGVyIiwKICAgICAgICAgICAgICAicHJvZHVjdHMiIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAibmFtZSIgOiAiS2luZ2Zpc2hlciIsCiAgICAgICAgICAgICAgICAgICJ0YXJnZXRzIiA6IFsKICAgICAgICAgICAgICAgICAgICAiS2luZ2Zpc2hlciIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAgICJsaWJyYXJ5IiA6IFsKICAgICAgICAgICAgICAgICAgICAgICJhdXRvbWF0aWMiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidGFyZ2V0cyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJtb2R1bGVOYW1lIiA6ICJLaW5nZmlzaGVyIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiIDogIktpbmdmaXNoZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAidG9vbHNWZXJzaW9uIiA6ICI1LjEiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAic3VtbWFyeSIgOiAiIiwKICAgICAgICAgICJ2ZXJzaW9uIiA6ICI2LjIuMSIKICAgICAgICB9CiAgICAgIF0KICAgIH0KICBdCn0.BG3Eamy2z2weUkkoDIr58Fy1ZnFl6Q1-sqAa3uY0XBrvBLWo9J_9L2MzAAvu0oEdVKplIoMUHjjb8jVkCCFiD8V4XDgFoNoJvutXyO9ifdFgbXKdIQk-FU-HfenCuOCZhJFTacNRhUBYTLggLcbgd-P_9JFHbfS0S74mSdk2Rppsxu_tSDbrkvQo3ic8LSZ1nGO0Sa0g38tR3253QqgyMeBndl-Ies0LrYmQPRmqfLZ-NWGDWcDBS3xd-vUAEsQknx60Pxi1aDRtj6HVCU9e5LAp6kxsaFKYZi4vnaQQ6Xrs50YZyv5k82PuWoDRIe8pzH7N-n39mWFr9W7cCQ4rXQ"}}